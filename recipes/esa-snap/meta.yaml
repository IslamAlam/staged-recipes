# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe
# If your package is python based, we recommend using Grayskull to generate it instead:
# https://github.com/conda-incubator/grayskull

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 14 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "esa-snap" %}
{% set version = "9" %}
{% set build_number = "0" %}
{% set sha256 = "ad6ef8c679c80c58660fe23ab5fb4974f9cd3ff4b119ad8e7e40dc79dbe03896" %}
{% set jpy_version = "0.9.0" %}
package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - url: https://download.esa.int/step/snap/{{ version }}.0/installers/{{ name }}_sentinel_unix_{{ version }}_0.sh  # [linux64]
    fn: {{ name }}_sentinel_unix_{{ version }}_0.sh                                                     # [linux64]
    sha256: {{ sha256 }}   

  # url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  # If getting the source from GitHub, remove the line above,
  # uncomment the line below, and modify as needed. Use releases if available:
  # url: https://github.com/simplejson/simplejson/releases/download/{{ version }}/simplejson-{{ version }}.tar.gz
  # and otherwise fall back to archive:
  # url: https://github.com/simplejson/simplejson/archive/v{{ version }}.tar.gz
  # sha256 is the preferred checksum -- you can get it for a file with:
  #  `openssl sha256 <file name>`.
  # You may need the openssl package, available on conda-forge:
  #  `conda install openssl -c conda-forge``
  - git_url: https://github.com/bcdev/jpy.git
    git_rev: {{ jpy_version }}
    git_depth: -1 # (Defaults to -1/not shallow)
    folder: jpy

build:
  skip: true    # [not linux64]
  number: {{ build_number }}
  error_overdepending: true
  error_overlinking: true
  missing_dso_whitelist:
    - '*'

# #   ignore_run_exports_from:
#   rpaths:
#     - jre/lib/amd64/server/
#     - jre/lib/
#     - lib64/
#     - /usr/lib64/
#     - lib/
#     - /usr/lib/#   # Uncomment the following line if the package is pure Python and the recipe is exactly the same for all platforms.
# #   # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
# #   # See https://conda-forge.org/docs/maintainer/knowledge_base.html#noarch-python for more details.
# #   # noarch: python
# #   # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
# #   # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
# #   # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
# #   # More info about selectors can be found in the conda-build docs: 
# #   # https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#preprocessing-selectors
# #   script: {{ PYTHON }} -m pip install . -vv
#   number: 0

requirements:
  build:
    - {{ compiler('cxx') }}   # [not osx]
    - {{ compiler('c') }}     # [not osx]
    - boost-cpp 1.68.*        # to avoid cmake picking up boost-cpp 1.70+
    - cmake 3.14.*
    - make
    - go
    - maven 3.6.*
    - openjdk 8.*
    - wget
    - clangdev 7.*

  host:
    - openssl
    - python
    - pip
  run:
    - python
    - openjdk 8.*
    - numpy
    - pyroSAR

test:
  # Some packages might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    # - jpyutil
    - esasnappy
  # For python packages, it is useful to run pip check. However, sometimes the
  # metadata used by pip is out of date. Thus this section is optional if it is
  # failing.
  requires:
    - pip
  commands:
    - pip check

about:
  home: https://step.esa.int/main/toolboxes/snap/
  summary: 'A common architecture for all Sentinel Toolboxes is being jointly developed by Brockmann Consult, SkyWatch and C-S called the Sentinel Application Platform (SNAP).'
  description: |
    The SNAP architecture is ideal for Earth Observation processing and 
    analysis due to the following technological innovations: 
    Extensibility, Portability, Modular Rich Client Platform, 
    Generic EO Data Abstraction, Tiled Memory Management, 
    and a Graph Processing Framework.
  # Remember to specify the license variants for BSD, Apache, GPL, and LGPL.
  # Use the SPDX identifier, e.g: GPL-2.0-only instead of GNU General Public License version 2.0
  # See https://spdx.org/licenses/
  license: MIT
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". 
  # Optional
  license_family: MIT
  # It is required to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # Please also note that some projects have multiple license files which all need to be added using a valid yaml list.
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file
  license_file: LICENSE.txt
  # The doc_url and dev_url are optional.
  doc_url: https://senbox.atlassian.net/wiki/spaces/SNAP/overview
  dev_url: https://step.esa.int/main/download/snap-download/

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - IslamAlam
